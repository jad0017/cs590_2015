--- coreutils-orig/src/stat.c	2015-06-04 15:07:32.511819304 -0500
+++ coreutils/src/stat.c	2015-06-04 15:48:10.578624289 -0500
@@ -34,6 +34,7 @@
 #include <sys/types.h>
 #include <pwd.h>
 #include <grp.h>
+#include <fcntl.h>
 #if USE_STATVFS
 # include <sys/statvfs.h>
 #elif HAVE_SYS_VFS_H
@@ -189,6 +190,9 @@
   {"format", required_argument, NULL, 'c'},
   {"printf", required_argument, NULL, PRINTF_OPTION},
   {"terse", no_argument, NULL, 't'},
+  {"fstat", no_argument, NULL, 'F' },
+  {"lstat", no_argument, NULL, 'l' },
+  {"stat", no_argument, NULL, 's' },
   {GETOPT_HELP_OPTION_DECL},
   {GETOPT_VERSION_OPTION_DECL},
   {NULL, 0, NULL, 0}
@@ -1280,7 +1284,8 @@
 /* stat the file and print what we find */
 static bool ATTRIBUTE_WARN_UNUSED_RESULT
 do_stat (char const *filename, char const *format,
-         char const *format2)
+         char const *format2,
+         int(*stat_fn)(const char *, struct stat *))
 {
   int fd = STREQ (filename, "-") ? 0 : -1;
   struct stat statbuf;
@@ -1296,9 +1301,7 @@
   /* We can't use the shorter
      (follow_links?stat:lstat) (filename, &statbug)
      since stat might be a function-like macro.  */
-  else if ((follow_links
-            ? stat (filename, &statbuf)
-            : lstat (filename, &statbuf)) != 0)
+  else if (stat_fn (filename, &statbuf) != 0)
     {
       error (0, errno, _("cannot stat %s"), quote (filename));
       return false;
@@ -1403,6 +1406,31 @@
   return format;
 }
 
+static int
+fstat_wrap (const char *pathname, struct stat *buf)
+{
+  int fd;
+  int ret;
+
+  fd = open (pathname, O_RDONLY);
+
+  if (fd == -1)
+    {
+      int oerrno = errno;
+      error (0, 0, _("failed to open file %s\n"),
+             quote (pathname));
+      errno = oerrno;
+      return -1;
+    }
+
+  ret = fstat (fd, buf);
+
+  /* Ignore return, short lived, OS will clean up if it fails. */
+  (void)close(fd);
+
+  return ret;
+}
+
 void
 usage (int status)
 {
@@ -1418,6 +1446,9 @@
       emit_mandatory_arg_note ();
 
       fputs (_("\
+  -s, --stat            use stat() [default]\n\
+  -F, --fstat           use fstat()\n\
+  -l, --lstat           use lstat() [ignores --derefrence]\n\
   -L, --dereference     follow links\n\
   -f, --file-system     display file system status instead of file status\n\
 "), stdout);
@@ -1508,6 +1539,10 @@
   char *format = NULL;
   char *format2;
   bool ok = true;
+  int use_stat = 0;
+  int use_fstat = 0;
+  int use_lstat = 0;
+  int(*stat_fn)(const char *, struct stat *) = stat;
 
   initialize_main (&argc, &argv);
   set_program_name (argv[0]);
@@ -1549,6 +1584,18 @@
           terse = true;
           break;
 
+        case 'F':
+          use_fstat = 1;
+          break;
+
+        case 'l':
+          use_lstat = 1;
+          break;
+
+        case 's':
+          use_stat = 1;
+          break;
+
         case_GETOPT_HELP_CHAR;
 
         case_GETOPT_VERSION_CHAR (PROGRAM_NAME, AUTHORS);
@@ -1564,6 +1611,12 @@
       usage (EXIT_FAILURE);
     }
 
+  if ((use_stat + use_fstat + use_lstat) > 1)
+    {
+      error (0, 0, _("only one of --stat, --fstat, --lstat may be used"));
+	  usage (EXIT_FAILURE);
+    }
+
   if (format)
     format2 = format;
   else
@@ -1572,10 +1625,19 @@
       format2 = default_format (fs, terse, true);
     }
 
+  if (use_fstat != 0)
+    stat_fn = fstat_wrap;
+  else if (use_lstat != 0)
+    stat_fn = lstat;
+  else if (use_stat != 0)
+    stat_fn = stat;
+  else
+    stat_fn = (follow_links ? stat : lstat);
+
   for (i = optind; i < argc; i++)
     ok &= (fs
            ? do_statfs (argv[i], format)
-           : do_stat (argv[i], format, format2));
+           : do_stat (argv[i], format, format2, stat_fn));
 
   return ok ? EXIT_SUCCESS : EXIT_FAILURE;
 }
